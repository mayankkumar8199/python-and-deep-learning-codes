{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "68d52a0d-5fd2-4b66-898a-511befa3b54c",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "93f02354-71d2-4f90-aef6-0d13372b5bff",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Iteration 1/100, Best Fitness: -910.4281626811381\n",
      "Iteration 2/100, Best Fitness: -354205.3106976091\n",
      "Iteration 3/100, Best Fitness: -63467883.10814877\n",
      "Iteration 4/100, Best Fitness: -530597114216.592\n",
      "Iteration 5/100, Best Fitness: -64860991088371.5\n",
      "Iteration 6/100, Best Fitness: -7590989020949837.0\n",
      "Iteration 7/100, Best Fitness: -2.0642999810402785e+18\n",
      "Iteration 8/100, Best Fitness: -1.9730996210060837e+20\n",
      "Iteration 9/100, Best Fitness: -6.348356961699502e+22\n",
      "Iteration 10/100, Best Fitness: -5.380320628550976e+24\n",
      "Iteration 11/100, Best Fitness: -3.609322811652228e+27\n",
      "Iteration 12/100, Best Fitness: -1.5675683251684936e+29\n",
      "Iteration 13/100, Best Fitness: -4.222320427894526e+31\n",
      "Iteration 14/100, Best Fitness: -6.2122624369808446e+32\n",
      "Iteration 15/100, Best Fitness: -2.1491190407212945e+35\n",
      "Iteration 16/100, Best Fitness: -5.61975969867096e+37\n",
      "Iteration 17/100, Best Fitness: -1.2779309391101303e+39\n",
      "Iteration 18/100, Best Fitness: -6.272522347101869e+42\n",
      "Iteration 19/100, Best Fitness: -1.0255953216459749e+45\n",
      "Iteration 20/100, Best Fitness: -3.5055481530605064e+47\n",
      "Iteration 21/100, Best Fitness: -3.1427653731761873e+49\n",
      "Iteration 22/100, Best Fitness: -5.493977970364979e+51\n",
      "Iteration 23/100, Best Fitness: -3.5143860739261654e+53\n",
      "Iteration 24/100, Best Fitness: -5.475820207892648e+55\n",
      "Iteration 25/100, Best Fitness: -2.279045740326276e+57\n",
      "Iteration 26/100, Best Fitness: -1.415549719045598e+58\n",
      "Iteration 27/100, Best Fitness: -4.387224326392431e+60\n",
      "Iteration 28/100, Best Fitness: -4.658257647692137e+62\n",
      "Iteration 29/100, Best Fitness: -2.3384550911818972e+65\n",
      "Iteration 30/100, Best Fitness: -2.764109730686782e+67\n",
      "Iteration 31/100, Best Fitness: -4.8284371442567865e+69\n",
      "Iteration 32/100, Best Fitness: -7.028713826526901e+70\n",
      "Iteration 33/100, Best Fitness: -1.5957601309257963e+72\n",
      "Iteration 34/100, Best Fitness: -1.7923607722229318e+74\n",
      "Iteration 35/100, Best Fitness: -4.671199546867758e+76\n",
      "Iteration 36/100, Best Fitness: -5.2925366472932635e+78\n",
      "Iteration 37/100, Best Fitness: -3.803527953345972e+81\n",
      "Iteration 38/100, Best Fitness: -1.9444333249101923e+84\n",
      "Iteration 39/100, Best Fitness: -2.9491050410996845e+86\n",
      "Iteration 40/100, Best Fitness: -1.1632020986530002e+90\n",
      "Iteration 41/100, Best Fitness: -1.6432960724931705e+92\n",
      "Iteration 42/100, Best Fitness: -9.768392094626787e+95\n",
      "Iteration 43/100, Best Fitness: -4.0705028559060103e+99\n",
      "Iteration 44/100, Best Fitness: -3.3723443145613e+101\n",
      "Iteration 45/100, Best Fitness: -5.735606847915134e+104\n",
      "Iteration 46/100, Best Fitness: -1.0878698820488458e+107\n",
      "Iteration 47/100, Best Fitness: -8.607327453704886e+109\n",
      "Iteration 48/100, Best Fitness: -2.6569557118450357e+113\n",
      "Iteration 49/100, Best Fitness: -2.2053393960624526e+115\n",
      "Iteration 50/100, Best Fitness: -2.599136389960728e+117\n",
      "Iteration 51/100, Best Fitness: -1.7016306815887437e+120\n",
      "Iteration 52/100, Best Fitness: -1.3831719826745355e+122\n",
      "Iteration 53/100, Best Fitness: -6.118214943302254e+124\n",
      "Iteration 54/100, Best Fitness: -4.725101607466886e+126\n",
      "Iteration 55/100, Best Fitness: -7.804576558662687e+127\n",
      "Iteration 56/100, Best Fitness: -3.785798594690554e+131\n",
      "Iteration 57/100, Best Fitness: -1.9842007078204136e+134\n",
      "Iteration 58/100, Best Fitness: -2.9285413367788384e+136\n",
      "Iteration 59/100, Best Fitness: -1.6418446427683833e+138\n",
      "Iteration 60/100, Best Fitness: -2.097145433141281e+141\n",
      "Iteration 61/100, Best Fitness: -6.803616973695251e+143\n",
      "Iteration 62/100, Best Fitness: -1.7443814791433689e+146\n",
      "Iteration 63/100, Best Fitness: -2.631315549144576e+148\n",
      "Iteration 64/100, Best Fitness: -5.6499029307719584e+150\n",
      "Iteration 65/100, Best Fitness: -1.0593157334670766e+153\n",
      "Iteration 66/100, Best Fitness: -1.2775834499425634e+156\n",
      "Iteration 67/100, Best Fitness: -5.945839991743362e+158\n",
      "Iteration 68/100, Best Fitness: -5.539551492466984e+161\n",
      "Iteration 69/100, Best Fitness: -3.595420187440508e+163\n",
      "Iteration 70/100, Best Fitness: -4.087172877311794e+165\n",
      "Iteration 71/100, Best Fitness: -8.219387851521079e+167\n",
      "Iteration 72/100, Best Fitness: -1.630335508153925e+169\n",
      "Iteration 73/100, Best Fitness: -6.734622594377423e+171\n",
      "Iteration 74/100, Best Fitness: -4.910355336327401e+173\n",
      "Iteration 75/100, Best Fitness: -8.06248562481089e+175\n",
      "Iteration 76/100, Best Fitness: -7.262487619703118e+178\n",
      "Iteration 77/100, Best Fitness: -8.788643903916323e+179\n",
      "Iteration 78/100, Best Fitness: -5.2636678784534704e+181\n",
      "Iteration 79/100, Best Fitness: -2.0017774453457373e+183\n",
      "Iteration 80/100, Best Fitness: -9.482668099503845e+185\n",
      "Iteration 81/100, Best Fitness: -1.3879264318191543e+188\n",
      "Iteration 82/100, Best Fitness: -2.6426078236126773e+190\n",
      "Iteration 83/100, Best Fitness: -1.3747587374241692e+192\n",
      "Iteration 84/100, Best Fitness: -6.289096470334332e+193\n",
      "Iteration 85/100, Best Fitness: -2.7142849069139554e+195\n",
      "Iteration 86/100, Best Fitness: -7.636365800452557e+196\n",
      "Iteration 87/100, Best Fitness: -2.736318338722896e+198\n",
      "Iteration 88/100, Best Fitness: -9.208493036868229e+198\n",
      "Iteration 89/100, Best Fitness: -3.845893511216429e+199\n",
      "Iteration 90/100, Best Fitness: -8.652091233597998e+199\n",
      "Iteration 91/100, Best Fitness: -3.188211104798786e+201\n",
      "Iteration 92/100, Best Fitness: -3.4303871468899616e+203\n",
      "Iteration 93/100, Best Fitness: -3.5438560793926875e+204\n",
      "Iteration 94/100, Best Fitness: -2.7176257218939003e+206\n",
      "Iteration 95/100, Best Fitness: -1.7215121832255469e+208\n",
      "Iteration 96/100, Best Fitness: -1.1849088837541497e+210\n",
      "Iteration 97/100, Best Fitness: -7.338092110827346e+210\n",
      "Iteration 98/100, Best Fitness: -1.2640120521310214e+211\n",
      "Iteration 99/100, Best Fitness: -1.0963353852326537e+212\n",
      "Iteration 100/100, Best Fitness: -3.9997153850950255e+214\n",
      "Best solution: [-5.19976440e+213 -5.16856859e+213 -3.93909097e+213 -5.09940018e+213\n",
      " -7.20072811e+213 -1.61948230e+213 -6.68270011e+213 -5.05774882e+212\n",
      " -2.73425735e+213 -1.84738694e+213]\n",
      "Best fitness: -3.9997153850950255e+214\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "\n",
    "class WhaleOptimization:\n",
    "    def __init__(self, num_whales, max_iter, dim, obj_function):\n",
    "        self.num_whales = num_whales\n",
    "        self.max_iter = max_iter\n",
    "        self.dim = dim  # Dimensionality of the problem (number of tasks)\n",
    "        self.obj_function = obj_function  # Objective function to minimize\n",
    "        self.a = 2  # Coefficient decreasing from 2 to 0\n",
    "\n",
    "    def optimize(self):\n",
    "        # Initialize the positions of whales (solutions)\n",
    "        whales = np.random.rand(self.num_whales, self.dim)\n",
    "        fitness = np.array([self.obj_function(whale) for whale in whales])\n",
    "        best_whale = whales[np.argmin(fitness)]\n",
    "        best_fitness = np.min(fitness)\n",
    "\n",
    "        for iteration in range(self.max_iter):\n",
    "            a = 2 - iteration * (2 / self.max_iter)  # a decreases linearly from 2 to 0\n",
    "            a2 = -1 + iteration * (-1 / self.max_iter)  # a2 linearly decreases from -1 to -2\n",
    "\n",
    "            for i in range(self.num_whales):\n",
    "                r1 = np.random.rand()\n",
    "                r2 = np.random.rand()\n",
    "                A = 2 * a * r1 - a\n",
    "                C = 2 * r2\n",
    "                b = 1\n",
    "                l = (a2 - 1) * np.random.rand() + 1\n",
    "                p = np.random.rand()\n",
    "\n",
    "                if p < 0.5:\n",
    "                    if abs(A) < 1:\n",
    "                        D = abs(C * best_whale - whales[i])\n",
    "                        whales[i] = best_whale - A * D\n",
    "                    else:\n",
    "                        rand_index = np.random.randint(0, self.num_whales)\n",
    "                        D = abs(C * whales[rand_index] - whales[i])\n",
    "                        whales[i] = whales[rand_index] - A * D\n",
    "                else:\n",
    "                    D = abs(best_whale - whales[i])\n",
    "                    whales[i] = D * np.exp(b * l) * np.cos(2 * np.pi * l) + best_whale\n",
    "\n",
    "                # Apply the objective function to the new position\n",
    "                new_fitness = self.obj_function(whales[i])\n",
    "                if new_fitness < fitness[i]:\n",
    "                    fitness[i] = new_fitness\n",
    "                    if new_fitness < best_fitness:\n",
    "                        best_fitness = new_fitness\n",
    "                        best_whale = whales[i]\n",
    "\n",
    "            print(f\"Iteration {iteration+1}/{self.max_iter}, Best Fitness: {best_fitness}\")\n",
    "\n",
    "        return best_whale, best_fitness\n",
    "\n",
    "# Objective function: Sum of task durations (simplified example)\n",
    "def objective_function(solution):\n",
    "    return np.sum(solution)\n",
    "\n",
    "# Number of tasks in the project\n",
    "num_tasks = 10\n",
    "woa = WhaleOptimization(num_whales=30, max_iter=100, dim=num_tasks, obj_function=objective_function)\n",
    "best_solution, best_fitness = woa.optimize()\n",
    "print(\"Best solution:\", best_solution)\n",
    "print(\"Best fitness:\", best_fitness)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "afb10a99-337b-465f-acd1-7f877c221399",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Iteration 1/200, Best Fitness: 68.76029848300449\n",
      "Iteration 2/200, Best Fitness: 63.782647914128816\n",
      "Iteration 3/200, Best Fitness: 55.74316414591542\n",
      "Iteration 4/200, Best Fitness: 54.617880285896405\n",
      "Iteration 5/200, Best Fitness: 53.68230750525668\n",
      "Iteration 6/200, Best Fitness: 53.68230750525668\n",
      "Iteration 7/200, Best Fitness: 53.68230750525668\n",
      "Iteration 8/200, Best Fitness: 26.506896375991854\n",
      "Iteration 9/200, Best Fitness: 26.205233316166815\n",
      "Iteration 10/200, Best Fitness: 26.10220445901958\n",
      "Iteration 11/200, Best Fitness: 25.535113745801464\n",
      "Iteration 12/200, Best Fitness: 25.253798347621316\n",
      "Iteration 13/200, Best Fitness: 22.76095637684237\n",
      "Iteration 14/200, Best Fitness: 22.005130621801833\n",
      "Iteration 15/200, Best Fitness: 20.9317756626054\n",
      "Iteration 16/200, Best Fitness: 20.885592029828754\n",
      "Iteration 17/200, Best Fitness: 20.885592029828754\n",
      "Iteration 18/200, Best Fitness: 20.885592029828754\n",
      "Iteration 19/200, Best Fitness: 20.885592029828754\n",
      "Iteration 20/200, Best Fitness: 20.885592029828754\n",
      "Iteration 21/200, Best Fitness: 20.885592029828754\n",
      "Iteration 22/200, Best Fitness: 20.885592029828754\n",
      "Iteration 23/200, Best Fitness: 20.885592029828754\n",
      "Iteration 24/200, Best Fitness: 20.885592029828754\n",
      "Iteration 25/200, Best Fitness: 20.885592029828754\n",
      "Iteration 26/200, Best Fitness: 20.885592029828754\n",
      "Iteration 27/200, Best Fitness: 20.885592029828754\n",
      "Iteration 28/200, Best Fitness: 20.885592029828754\n",
      "Iteration 29/200, Best Fitness: 20.885592029828754\n",
      "Iteration 30/200, Best Fitness: 20.885592029828754\n",
      "Iteration 31/200, Best Fitness: 20.885592029828754\n",
      "Iteration 32/200, Best Fitness: 20.885592029828754\n",
      "Iteration 33/200, Best Fitness: 20.885592029828754\n",
      "Iteration 34/200, Best Fitness: 20.885592029828754\n",
      "Iteration 35/200, Best Fitness: 20.885592029828754\n",
      "Iteration 36/200, Best Fitness: 20.885592029828754\n",
      "Iteration 37/200, Best Fitness: 20.885592029828754\n",
      "Iteration 38/200, Best Fitness: 20.885592029828754\n",
      "Iteration 39/200, Best Fitness: 20.885592029828754\n",
      "Iteration 40/200, Best Fitness: 20.885592029828754\n",
      "Iteration 41/200, Best Fitness: 20.885592029828754\n",
      "Iteration 42/200, Best Fitness: 20.885592029828754\n",
      "Iteration 43/200, Best Fitness: 20.885592029828754\n",
      "Iteration 44/200, Best Fitness: 20.885592029828754\n",
      "Iteration 45/200, Best Fitness: 20.885592029828754\n",
      "Iteration 46/200, Best Fitness: 20.885592029828754\n",
      "Iteration 47/200, Best Fitness: 20.885592029828754\n",
      "Iteration 48/200, Best Fitness: 20.885592029828754\n",
      "Iteration 49/200, Best Fitness: 20.885592029828754\n",
      "Iteration 50/200, Best Fitness: 20.885592029828754\n",
      "Iteration 51/200, Best Fitness: 20.885592029828754\n",
      "Iteration 52/200, Best Fitness: 20.885592029828754\n",
      "Iteration 53/200, Best Fitness: 20.885592029828754\n",
      "Iteration 54/200, Best Fitness: 20.885592029828754\n",
      "Iteration 55/200, Best Fitness: 20.885592029828754\n",
      "Iteration 56/200, Best Fitness: 20.885592029828754\n",
      "Iteration 57/200, Best Fitness: 20.885592029828754\n",
      "Iteration 58/200, Best Fitness: 20.885592029828754\n",
      "Iteration 59/200, Best Fitness: 20.885592029828754\n",
      "Iteration 60/200, Best Fitness: 20.885592029828754\n",
      "Iteration 61/200, Best Fitness: 20.885592029828754\n",
      "Iteration 62/200, Best Fitness: 20.885592029828754\n",
      "Iteration 63/200, Best Fitness: 20.885592029828754\n",
      "Iteration 64/200, Best Fitness: 20.885592029828754\n",
      "Iteration 65/200, Best Fitness: 20.885592029828754\n",
      "Iteration 66/200, Best Fitness: 20.885592029828754\n",
      "Iteration 67/200, Best Fitness: 20.885592029828754\n",
      "Iteration 68/200, Best Fitness: 20.885592029828754\n",
      "Iteration 69/200, Best Fitness: 20.885592029828754\n",
      "Iteration 70/200, Best Fitness: 20.885592029828754\n",
      "Iteration 71/200, Best Fitness: 20.885592029828754\n",
      "Iteration 72/200, Best Fitness: 20.885592029828754\n",
      "Iteration 73/200, Best Fitness: 20.885592029828754\n",
      "Iteration 74/200, Best Fitness: 20.885592029828754\n",
      "Iteration 75/200, Best Fitness: 20.885592029828754\n",
      "Iteration 76/200, Best Fitness: 20.885592029828754\n",
      "Iteration 77/200, Best Fitness: 20.885592029828754\n",
      "Iteration 78/200, Best Fitness: 20.885592029828754\n",
      "Iteration 79/200, Best Fitness: 20.885592029828754\n",
      "Iteration 80/200, Best Fitness: 20.885592029828754\n",
      "Iteration 81/200, Best Fitness: 20.885592029828754\n",
      "Iteration 82/200, Best Fitness: 20.885592029828754\n",
      "Iteration 83/200, Best Fitness: 20.885592029828754\n",
      "Iteration 84/200, Best Fitness: 20.885592029828754\n",
      "Iteration 85/200, Best Fitness: 20.885592029828754\n",
      "Iteration 86/200, Best Fitness: 20.885592029828754\n",
      "Iteration 87/200, Best Fitness: 20.885592029828754\n",
      "Iteration 88/200, Best Fitness: 20.885592029828754\n",
      "Iteration 89/200, Best Fitness: 20.885592029828754\n",
      "Iteration 90/200, Best Fitness: 20.885592029828754\n",
      "Iteration 91/200, Best Fitness: 20.885592029828754\n",
      "Iteration 92/200, Best Fitness: 20.885592029828754\n",
      "Iteration 93/200, Best Fitness: 20.885592029828754\n",
      "Iteration 94/200, Best Fitness: 20.885592029828754\n",
      "Iteration 95/200, Best Fitness: 20.885592029828754\n",
      "Iteration 96/200, Best Fitness: 20.885592029828754\n",
      "Iteration 97/200, Best Fitness: 20.885592029828754\n",
      "Iteration 98/200, Best Fitness: 20.885592029828754\n",
      "Iteration 99/200, Best Fitness: 20.885592029828754\n",
      "Iteration 100/200, Best Fitness: 20.885592029828754\n",
      "Iteration 101/200, Best Fitness: 20.885592029828754\n",
      "Iteration 102/200, Best Fitness: 20.885592029828754\n",
      "Iteration 103/200, Best Fitness: 20.885592029828754\n",
      "Iteration 104/200, Best Fitness: 20.885592029828754\n",
      "Iteration 105/200, Best Fitness: 20.885592029828754\n",
      "Iteration 106/200, Best Fitness: 20.885592029828754\n",
      "Iteration 107/200, Best Fitness: 20.885592029828754\n",
      "Iteration 108/200, Best Fitness: 20.885592029828754\n",
      "Iteration 109/200, Best Fitness: 20.885592029828754\n",
      "Iteration 110/200, Best Fitness: 20.885592029828754\n",
      "Iteration 111/200, Best Fitness: 20.885592029828754\n",
      "Iteration 112/200, Best Fitness: 20.885592029828754\n",
      "Iteration 113/200, Best Fitness: 20.885592029828754\n",
      "Iteration 114/200, Best Fitness: 20.885592029828754\n",
      "Iteration 115/200, Best Fitness: 20.885592029828754\n",
      "Iteration 116/200, Best Fitness: 20.885592029828754\n",
      "Iteration 117/200, Best Fitness: 20.885592029828754\n",
      "Iteration 118/200, Best Fitness: 20.885592029828754\n",
      "Iteration 119/200, Best Fitness: 20.885592029828754\n",
      "Iteration 120/200, Best Fitness: 20.885592029828754\n",
      "Iteration 121/200, Best Fitness: 20.885592029828754\n",
      "Iteration 122/200, Best Fitness: 20.885592029828754\n",
      "Iteration 123/200, Best Fitness: 20.885592029828754\n",
      "Iteration 124/200, Best Fitness: 20.885592029828754\n",
      "Iteration 125/200, Best Fitness: 20.885592029828754\n",
      "Iteration 126/200, Best Fitness: 20.885592029828754\n",
      "Iteration 127/200, Best Fitness: 20.885592029828754\n",
      "Iteration 128/200, Best Fitness: 20.885592029828754\n",
      "Iteration 129/200, Best Fitness: 20.885592029828754\n",
      "Iteration 130/200, Best Fitness: 20.885592029828754\n",
      "Iteration 131/200, Best Fitness: 20.885592029828754\n",
      "Iteration 132/200, Best Fitness: 20.885592029828754\n",
      "Iteration 133/200, Best Fitness: 20.885592029828754\n",
      "Iteration 134/200, Best Fitness: 20.885592029828754\n",
      "Iteration 135/200, Best Fitness: 20.885592029828754\n",
      "Iteration 136/200, Best Fitness: 20.885592029828754\n",
      "Iteration 137/200, Best Fitness: 20.885592029828754\n",
      "Iteration 138/200, Best Fitness: 20.885592029828754\n",
      "Iteration 139/200, Best Fitness: 20.885592029828754\n",
      "Iteration 140/200, Best Fitness: 20.885592029828754\n",
      "Iteration 141/200, Best Fitness: 20.885592029828754\n",
      "Iteration 142/200, Best Fitness: 20.885592029828754\n",
      "Iteration 143/200, Best Fitness: 20.885592029828754\n",
      "Iteration 144/200, Best Fitness: 20.885592029828754\n",
      "Iteration 145/200, Best Fitness: 20.885592029828754\n",
      "Iteration 146/200, Best Fitness: 20.885592029828754\n",
      "Iteration 147/200, Best Fitness: 20.885592029828754\n",
      "Iteration 148/200, Best Fitness: 20.885592029828754\n",
      "Iteration 149/200, Best Fitness: 20.885592029828754\n",
      "Iteration 150/200, Best Fitness: 20.885592029828754\n",
      "Iteration 151/200, Best Fitness: 20.885592029828754\n",
      "Iteration 152/200, Best Fitness: 20.885592029828754\n",
      "Iteration 153/200, Best Fitness: 20.885592029828754\n",
      "Iteration 154/200, Best Fitness: 20.885592029828754\n",
      "Iteration 155/200, Best Fitness: 20.885592029828754\n",
      "Iteration 156/200, Best Fitness: 20.885592029828754\n",
      "Iteration 157/200, Best Fitness: 20.885592029828754\n",
      "Iteration 158/200, Best Fitness: 20.885592029828754\n",
      "Iteration 159/200, Best Fitness: 20.885592029828754\n",
      "Iteration 160/200, Best Fitness: 20.885592029828754\n",
      "Iteration 161/200, Best Fitness: 20.885592029828754\n",
      "Iteration 162/200, Best Fitness: 20.885592029828754\n",
      "Iteration 163/200, Best Fitness: 20.885592029828754\n",
      "Iteration 164/200, Best Fitness: 20.885592029828754\n",
      "Iteration 165/200, Best Fitness: 20.885592029828754\n",
      "Iteration 166/200, Best Fitness: 20.885592029828754\n",
      "Iteration 167/200, Best Fitness: 20.885592029828754\n",
      "Iteration 168/200, Best Fitness: 20.885592029828754\n",
      "Iteration 169/200, Best Fitness: 20.885592029828754\n",
      "Iteration 170/200, Best Fitness: 20.885592029828754\n",
      "Iteration 171/200, Best Fitness: 20.885592029828754\n",
      "Iteration 172/200, Best Fitness: 20.885592029828754\n",
      "Iteration 173/200, Best Fitness: 20.885592029828754\n",
      "Iteration 174/200, Best Fitness: 20.885592029828754\n",
      "Iteration 175/200, Best Fitness: 20.885592029828754\n",
      "Iteration 176/200, Best Fitness: 20.885592029828754\n",
      "Iteration 177/200, Best Fitness: 20.885592029828754\n",
      "Iteration 178/200, Best Fitness: 20.885592029828754\n",
      "Iteration 179/200, Best Fitness: 20.885592029828754\n",
      "Iteration 180/200, Best Fitness: 20.885592029828754\n",
      "Iteration 181/200, Best Fitness: 20.885592029828754\n",
      "Iteration 182/200, Best Fitness: 20.885592029828754\n",
      "Iteration 183/200, Best Fitness: 20.885592029828754\n",
      "Iteration 184/200, Best Fitness: 20.885592029828754\n",
      "Iteration 185/200, Best Fitness: 20.885592029828754\n",
      "Iteration 186/200, Best Fitness: 20.885592029828754\n",
      "Iteration 187/200, Best Fitness: 20.885592029828754\n",
      "Iteration 188/200, Best Fitness: 20.885592029828754\n",
      "Iteration 189/200, Best Fitness: 20.885592029828754\n",
      "Iteration 190/200, Best Fitness: 20.885592029828754\n",
      "Iteration 191/200, Best Fitness: 20.885592029828754\n",
      "Iteration 192/200, Best Fitness: 20.885592029828754\n",
      "Iteration 193/200, Best Fitness: 20.885592029828754\n",
      "Iteration 194/200, Best Fitness: 20.885592029828754\n",
      "Iteration 195/200, Best Fitness: 20.885592029828754\n",
      "Iteration 196/200, Best Fitness: 20.885592029828754\n",
      "Iteration 197/200, Best Fitness: 20.885592029828754\n",
      "Iteration 198/200, Best Fitness: 20.885592029828754\n",
      "Iteration 199/200, Best Fitness: 20.885592029828754\n",
      "Iteration 200/200, Best Fitness: 20.885592029828754\n",
      "Best solution (start times): [-0.21905049 -0.25633498 -0.34863697 -0.54205515 -0.3732038 ]\n",
      "Best fitness (project duration): 20.885592029828754\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "\n",
    "class WhaleOptimization:\n",
    "    def __init__(self, num_whales, max_iter, dim, obj_function):\n",
    "        self.num_whales = num_whales\n",
    "        self.max_iter = max_iter\n",
    "        self.dim = dim  # Dimensionality of the problem (number of tasks)\n",
    "        self.obj_function = obj_function\n",
    "        self.a = 2  # Coefficient decreasing from 2 to 0\n",
    "\n",
    "    def optimize(self):\n",
    "        # Initialize the positions of whales (solutions)\n",
    "        whales = np.random.rand(self.num_whales, self.dim) * 100\n",
    "        whales = np.floor(whales)  # Discretize start times to whole numbers\n",
    "        fitness = np.array([self.obj_function(whale) for whale in whales])\n",
    "        best_whale = whales[np.argmin(fitness)]\n",
    "        best_fitness = np.min(fitness)\n",
    "\n",
    "        for iteration in range(self.max_iter):\n",
    "            a = 2 - iteration * (2 / self.max_iter)  # a decreases linearly from 2 to 0\n",
    "            a2 = -1 + iteration * (-1 / self.max_iter)  # a2 decreases linearly from -1 to -2\n",
    "\n",
    "            for i in range(self.num_whales):\n",
    "                r1 = np.random.rand()\n",
    "                r2 = np.random.rand()\n",
    "                A = 2 * a * r1 - a\n",
    "                C = 2 * r2\n",
    "                b = 1\n",
    "                l = (a2 - 1) * np.random.rand() + 1\n",
    "                p = np.random.rand()\n",
    "\n",
    "                if p < 0.5:\n",
    "                    if abs(A) < 1:\n",
    "                        D = abs(C * best_whale - whales[i])\n",
    "                        whales[i] = best_whale - A * D\n",
    "                    else:\n",
    "                        rand_index = np.random.randint(0, self.num_whales)\n",
    "                        D = abs(C * whales[rand_index] - whales[i])\n",
    "                        whales[i] = whales[rand_index] - A * D\n",
    "                else:\n",
    "                    D = abs(best_whale - whales[i])\n",
    "                    whales[i] = D * np.exp(b * l) * np.cos(2 * np.pi * l) + best_whale\n",
    "\n",
    "                # Apply the objective function to the new position\n",
    "                new_fitness = self.obj_function(whales[i])\n",
    "                if new_fitness < fitness[i]:\n",
    "                    fitness[i] = new_fitness\n",
    "                    if new_fitness < best_fitness:\n",
    "                        best_fitness = new_fitness\n",
    "                        best_whale = whales[i]\n",
    "\n",
    "            print(f\"Iteration {iteration+1}/{self.max_iter}, Best Fitness: {best_fitness}\")\n",
    "\n",
    "        return best_whale, best_fitness\n",
    "\n",
    "# Define tasks with dependencies and durations\n",
    "tasks = {\n",
    "    1: {'duration': 4, 'deps': [], 'resources': 2},\n",
    "    2: {'duration': 6, 'deps': [1], 'resources': 1},\n",
    "    3: {'duration': 3, 'deps': [1], 'resources': 1},\n",
    "    4: {'duration': 5, 'deps': [2, 3], 'resources': 2},\n",
    "    5: {'duration': 2, 'deps': [3], 'resources': 1}\n",
    "}\n",
    "num_tasks = len(tasks)\n",
    "total_resources = 3\n",
    "\n",
    "# Objective function to evaluate a scheduling solution\n",
    "def objective_function(solution):\n",
    "    end_times = np.zeros(num_tasks)\n",
    "    for i, start_time in enumerate(solution):\n",
    "        task_id = i + 1\n",
    "        deps_completed = max([end_times[dep-1] for dep in tasks[task_id]['deps']] or [0])\n",
    "        if start_time < deps_completed:\n",
    "            return float('inf')  # Invalid start time due to dependency\n",
    "        end_times[i] = start_time + tasks[task_id]['duration']\n",
    "        if np.sum([tasks[j+1]['resources'] for j, time in enumerate(solution) if start_time < end_times[j] and end_times[i] > time]) > total_resources:\n",
    "            return float('inf')  # Resource limit exceeded\n",
    "    return max(end_times)  # The makespan of the project\n",
    "\n",
    "woa = WhaleOptimization(num_whales=50, max_iter=200, dim=num_tasks, obj_function=objective_function)\n",
    "best_solution, best_fitness = woa.optimize()\n",
    "print(\"Best solution (start times):\", best_solution)\n",
    "print(\"Best fitness (project duration):\", best_fitness)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4aaf7cef-a192-433b-9b1d-d1f7cf1501b7",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
